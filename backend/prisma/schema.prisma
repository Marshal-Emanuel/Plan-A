// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Event {
  eventId       String    @id @default(uuid())
  managerId     String
  name          String
  description   String
  moreInfo      String
  location      String
  date          DateTime
  time          DateTime
  numberOfTickets Int     @default(0)
  remainingTickets Int     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  image         String?   @db.VarChar(MAX)
  hasRegular    Boolean   @default(true)
  regularPrice  Float     @default(0)
  hasVIP        Boolean   @default(false)
  vipPrice      Float     @default(0)
  hasChildren   Boolean   @default(false)
  childrenPrice Float     @default(0)
  isPromoted    Boolean   @default(false)
  promoDetails  String?
  status        String    @default("ACTIVE")
  nature        String    @default("PENDING")
  discount      Float?    @default(0)
  wishlists     Wishlist[]
  reservations  Reservation[]
  reviews       Review[]  // Add this line
  manager       User      @relation("ManagedEvents", fields: [managerId], references: [userId])
}

model User {
  userId          String    @id @default(uuid())
  name            String
  phoneNumber     String    @unique
  email           String    @unique
  role            String    @default("user")
  accountStatus   String    @default("active")
  password        String
  profilePicture  String?   @db.VarChar(MAX)
  isSubscribedToMails Boolean @default(false)
  reviews         Review[]
  wishlists       Wishlist[]
  reservations    Reservation[]
  managedEvents   Event[]   @relation("ManagedEvents")
  systemReviews   SystemReview[]
}

model Review {
  reviewId  String    @id @default(uuid())
  comment   String
  rating    Int
  userId    String
  eventId   String
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  event     Event     @relation(fields: [eventId], references: [eventId], onDelete: NoAction, onUpdate: NoAction)
}

model Wishlist {
  wishlistId String   @id @default(uuid())
  userId     String
  eventId    String
  user       User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  event      Event    @relation(fields: [eventId], references: [eventId], onDelete: NoAction, onUpdate: NoAction)
}

model SystemReview {
  systemReviewId String @id @default(uuid())
  userId         String
  comment        String
  rating         Int
  isDeleted      Boolean @default(false)
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
}

model Reservation {
  reservationId  String    @id @default(uuid())
  eventId        String
  userId         String
  status         String    @default("ACTIVE")
  isRegular      Boolean   @default(false)
  isVIP          Boolean   @default(false)
  isChildren     Boolean   @default(false)
  paidAmmount    Float     @default(0)
  proxyName      String?
  numberOfPeople Int       @default(1)
  ammountPaid    Float     @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  event          Event     @relation(fields: [eventId], references: [eventId], onDelete: NoAction, onUpdate: NoAction)
  user           User      @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
}
